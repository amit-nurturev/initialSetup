name: Deploy TO Staging
on:
  push:
    branches: ["staging"]
  workflow_dispatch:

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    env:
      ECR_URI: "979176640062.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com"

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: 16.x

      - name: Install Serverless Framework
        run: npm install -g serverless

      - name: Install Serverless Plugins
        run: |
          npm install -g @serverless/compose serverless-python-requirements serverless-offline

      - name: Create env file
        run: |
          cat > env.yml << EOF
          AWS_REGION: ${{ vars.AWS_REGION }}
          EOF

      - name: Create env file for secrets
        run: |
          cat > env_secrets.yml << EOF
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          EOF

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Verify AWS CLI Configuration
        run: aws sts get-caller-identity

      - name: Log in to AWS ECR
        run: |
          aws ecr get-login-password --region ${{ vars.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_URI }}

      - name: Build Docker image
        run: docker build -t test .

      - name: Tag Docker image for ECR
        run: docker tag test:latest ${{ env.ECR_URI }}/test:latest

      - name: Push Docker image to AWS ECR
        run: docker push ${{ env.ECR_URI }}/test:latest

      - name: Deploy Lambda functions
        run: sls deploy --stage staging
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}

      - name: Clean up temp files
        run: rm -f env.yml env_secrets.yml
